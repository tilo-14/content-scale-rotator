<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scale Animation - Flip Clock</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: #000000;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        .container {
            text-align: center;
            position: relative;
            perspective: 2000px;
        }

        .scale-text {
            font-size: 96px;
            font-weight: 700;
            font-style: italic;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.15em;
            white-space: nowrap;
        }

        .scale-static {
            position: relative;
            z-index: 2;
        }

        .rotating-container {
            position: relative;
            display: inline-block;
            height: 1.2em;
            min-width: 500px;
            text-align: left;
            transform-style: preserve-3d;
            perspective: 1500px;
        }

        .rotating-word {
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%) rotateX(90deg);
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            opacity: 0;
            backface-visibility: hidden;
            transform-style: preserve-3d;
            transform-origin: center center;
            transition: none;
        }

        /* Initial state - hidden above */
        .rotating-word.waiting {
            transform: translateY(-50%) rotateX(-90deg);
            opacity: 0;
        }

        /* Rotating in from top */
        .rotating-word.flip-in {
            animation: flipIn 0.5s ease-in-out forwards;
        }

        /* Static display state */
        .rotating-word.active {
            transform: translateY(-50%) rotateX(0deg);
            opacity: 1;
        }

        /* Rotating out to bottom */
        .rotating-word.flip-out {
            animation: flipOut 0.5s ease-in-out forwards;
        }

        @keyframes flipIn {
            0% {
                transform: translateY(-50%) rotateX(-90deg) translateZ(100px);
                opacity: 0;
            }
            20% {
                opacity: 1;
            }
            100% {
                transform: translateY(-50%) rotateX(0deg) translateZ(0);
                opacity: 1;
            }
        }

        @keyframes flipOut {
            0% {
                transform: translateY(-50%) rotateX(0deg) translateZ(0);
                opacity: 1;
            }
            80% {
                opacity: 1;
            }
            100% {
                transform: translateY(-50%) rotateX(90deg) translateZ(100px);
                opacity: 0;
            }
        }

        /* Controls for recording */
        .controls {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
            z-index: 100;
        }

        button {
            padding: 12px 24px;
            font-size: 1rem;
            font-weight: 500;
            color: white;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-family: 'Roboto', sans-serif;
        }

        button:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.3);
        }

        /* Size adjustment for high-res capture */
        @media (min-width: 2000px) {
            .scale-text {
                font-size: 496.29px;
            }
            .rotating-container {
                min-width: 2500px;
            }
        }

        /* Standard desktop size */
        @media (min-width: 1200px) and (max-width: 1999px) {
            .scale-text {
                font-size: 180px;
            }
            .rotating-container {
                min-width: 900px;
            }
        }

        /* Mobile responsive */
        @media (max-width: 768px) {
            .scale-text {
                font-size: 48px;
            }
            .rotating-container {
                min-width: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="scale-text">
            <span class="scale-static">Scale</span>
            <div class="rotating-container">
                <span class="rotating-word waiting" data-word="on Solana.">on Solana.</span>
                <span class="rotating-word waiting" data-word="Accounts.">Accounts.</span>
                <span class="rotating-word waiting" data-word="Tokens.">Tokens.</span>
                <span class="rotating-word waiting" data-word="PDAs.">PDAs.</span>
                <span class="rotating-word waiting" data-word="Apps.">Apps.</span>
                <span class="rotating-word waiting" data-word="ZK.">ZK.</span>
                <span class="rotating-word waiting" data-word="Anything.">Anything.</span>
            </div>
        </div>
    </div>

    <div class="controls">
        <button onclick="startAnimation()">Start Animation</button>
        <button onclick="resetAnimation()">Reset</button>
        <button onclick="setHighRes()">Set High Res (496px)</button>
        <button onclick="setStandardRes()">Set Standard (180px)</button>
    </div>

    <script>
        let words = document.querySelectorAll('.rotating-word');
        let currentIndex = -1;
        let animationTimeout;
        let flipTimeout;
        let isAnimating = false;

        function flipToWord(index) {
            // If there's a previous word, flip it out
            if (currentIndex >= 0 && currentIndex < words.length) {
                words[currentIndex].classList.remove('active');
                words[currentIndex].classList.add('flip-out');
            }

            // Flip in the new word
            if (index < words.length) {
                words[index].classList.remove('waiting');
                words[index].classList.add('flip-in');
                
                // After flip animation completes, set to active state
                setTimeout(() => {
                    words[index].classList.remove('flip-in');
                    words[index].classList.add('active');
                }, 500);
            }

            currentIndex = index;
        }

        function startAnimation() {
            if (isAnimating) return;
            
            isAnimating = true;
            currentIndex = -1;
            
            // Reset all words
            words.forEach(word => {
                word.className = 'rotating-word waiting';
            });

            // Start the flip sequence
            let wordIndex = 0;
            
            // Immediate first flip
            flipToWord(wordIndex);
            
            // Schedule subsequent flips
            animationTimeout = setInterval(() => {
                wordIndex++;
                
                if (wordIndex >= words.length) {
                    clearInterval(animationTimeout);
                    isAnimating = false;
                    return;
                }
                
                // Wait 0.5s (static time) then flip for 0.5s
                flipToWord(wordIndex);
            }, 1000); // 0.5s static + 0.5s flip = 1s total per word
        }

        function resetAnimation() {
            clearInterval(animationTimeout);
            clearTimeout(flipTimeout);
            isAnimating = false;
            currentIndex = -1;
            
            // Reset all words
            words.forEach(word => {
                word.className = 'rotating-word waiting';
            });
        }

        function setHighRes() {
            document.querySelector('.scale-text').style.fontSize = '496.29px';
            document.querySelector('.rotating-container').style.minWidth = '2500px';
        }

        function setStandardRes() {
            document.querySelector('.scale-text').style.fontSize = '180px';
            document.querySelector('.rotating-container').style.minWidth = '900px';
        }

        // Auto-start animation on page load
        window.addEventListener('load', () => {
            setTimeout(startAnimation, 500);
        });
    </script>
</body>
</html>
